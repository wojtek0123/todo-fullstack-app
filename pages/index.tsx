import type { NextPage } from 'next';
import Head from 'next/head';
import React, { useState } from 'react';
import { useMutation, useQuery } from '@apollo/client';
import {
  ADD_TASK,
  DELETE_TASK,
  GET_TASKS,
} from '../graphql/queries';
import Modal from '../components/Modal';

const Home: NextPage = () => {
  const [enteredTask, setEnteredTask] = useState('');
  const [editId, setEditId] = useState('');
  const [showEditModal, setShowEditModal] = useState(false);
  const { data, error, loading } = useQuery(GET_TASKS);
  const [addTask] = useMutation(ADD_TASK, {
    onCompleted: () => {
      window.location.reload();
    },
  });
  const [deleteTask] = useMutation(DELETE_TASK, {
    onCompleted: () => {
      window.location.reload();
    },
  });

  const deleteTaskHandler = (id: string) => {
    deleteTask({ variables: { id } });
  };

  const setEditTaskIdHandler = (id: string) => {
    setEditId(id);
    setShowEditModal(true);
  };

  const changeInputHandler = (event: React.FormEvent<HTMLInputElement>) => {
    const taskMessage = event.currentTarget.value.trim();
    setEnteredTask(taskMessage);
  };

  const hideModalHandler = () => {
    setEditId('');
    setShowEditModal(false);
  };

  const addTaskSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    addTask({ variables: { text: enteredTask } });
    setEnteredTask('');
  };

  return (
    <div className='max-w-xl mx-auto w-screen min-h-screen'>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <header className='bg-blue-600 pb-8 pt-4 rounded-bl-[2.5rem]'>
        <h1 className='text-center text-3xl mb-8 text-white'>
          Fullstack ToDo App
        </h1>
        <form className='flex flex-col items-center' onSubmit={addTaskSubmit}>
          <input
            type='text'
            className='border rounded-3xl px-6 py-2 text-lg'
            placeholder='Add task...'
            onChange={changeInputHandler}
          />
        </form>
      </header>
      <main className='mt-6 mx-2 md:mx-0'>
        {loading && <h2 className='text-center text-3xl'>Loading...</h2>}
        {!loading && (
          <ul className='flex flex-col items-start'>
            {data.tasks.map((task: { id: string; task: string }) => (
              <li
                className='text-lg sm:text-xl flex justify-between w-full my-1 items-center'
                key={task.id}
              >
                {task.task}
                <div>
                  <button
                    type='button'
                    className='border bg-blue-600 py-1 px-2 rounded-xl text-white cursor-pointer'
                    onClick={() => setEditTaskIdHandler(task.id)}
                  >
                    edit
                  </button>
                  <button
                    type='button'
                    className='border bg-blue-600 py-1 px-2 rounded-xl text-white cursor-pointer'
                    onClick={() => deleteTaskHandler(task.id)}
                  >
                    delete
                  </button>
                </div>
              </li>
            ))}
          </ul>
        )}
        {showEditModal && <Modal onHide={hideModalHandler} id={editId} />}
      </main>
      <footer></footer>
    </div>
  );
};

export default Home;
